import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Command } from 'commander';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class BankManagersAnalyzer {
    constructor() {
        this.data = [];
        this.loadData();
    }

    loadData() {
        try {
            const filePath = path.join(__dirname, 'bank_managers.json');
            
            if (!fs.existsSync(filePath)) {
                console.log('‚ùå –§–∞–π–ª bank_managers.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
                return;
            }
            
            const rawData = fs.readFileSync(filePath, 'utf8');
            this.data = JSON.parse(rawData);
            console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
            console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${this.data.length}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
        }
    }

    getGeneralStats() {
        const totalManagers = this.data.length;
        const activeBanks = this.data.filter(item => item.NAME_STATE === '–ù–æ—Ä–º–∞–ª—å–Ω–∏–π').length;
        const liquidatedBanks = this.data.filter(item => item.NAME_STATE === '–†–µ–∂–∏–º –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó').length;
        const excludedBanks = this.data.filter(item => item.NAME_STATE && item.NAME_STATE.includes('–í–∏–∫–ª—é—á–µ–Ω–æ')).length;

        return {
            totalManagers,
            activeBanks,
            liquidatedBanks,
            excludedBanks
        };
    }

    getTopPositions(limit = 10) {
        const positions = {};
        
        this.data.forEach(manager => {
            const position = manager.NAME_DOLGN || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            positions[position] = (positions[position] || 0) + 1;
        });

        return Object.entries(positions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([position, count]) => ({ position, count }));
    }

    getTopBanks(limit = 10) {
        const banks = {};
        
        this.data.forEach(manager => {
            const bank = manager.SHORTNAME || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            banks[bank] = (banks[bank] || 0) + 1;
        });

        return Object.entries(banks)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([bank, count]) => ({ bank, count }));
    }

    findManagerByLastName(lastName) {
        if (!lastName || typeof lastName !== 'string') {
            console.log('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É');
            return [];
        }
        
        return this.data.filter(manager => 
            manager.LAST_NAME && 
            manager.LAST_NAME.toLowerCase().includes(lastName.toLowerCase())
        );
    }

    getYearlyStats() {
        const yearly = {};
        
        this.data.forEach(manager => {
            if (manager.DATE_BANK) {
                try {
                    const date = new Date(manager.DATE_BANK);
                    if (!isNaN(date.getTime())) {
                        const year = date.getFullYear();
                        yearly[year] = (yearly[year] || 0) + 1;
                    }
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏
                }
            }
        });

        return Object.entries(yearly)
            .sort(([yearA], [yearB]) => yearA - yearB)
            .map(([year, count]) => ({ year: parseInt(year), count }));
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ Commander
const program = new Command();
const analyzer = new BankManagersAnalyzer();

program
    .name('bank-analyzer')
    .description('CLI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤')
    .version('1.0.0');

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
program
    .command('stats')
    .description('–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    .action(() => {
        if (analyzer.data.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
            return;
        }

        const stats = analyzer.getGeneralStats();
        console.log('\nüìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
        console.log('='.repeat(30));
        console.log(`üë• –í—Å—å–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ${stats.totalManagers}`);
        console.log(`‚úÖ –ë–∞–Ω–∫—ñ–≤ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º: ${stats.activeBanks}`);
        console.log(`üîö –ë–∞–Ω–∫—ñ–≤ —É —Ä–µ–∂–∏–º—ñ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó: ${stats.liquidatedBanks}`);
        console.log(`‚ùå –ë–∞–Ω–∫—ñ–≤ –≤–∏–∫–ª—é—á–µ–Ω–æ –∑ —Ä–µ—î—Å—Ç—Ä—É: ${stats.excludedBanks}`);
    });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–ø –ø–æ—Å–∞–¥
program
    .command('positions')
    .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –ø–æ—Å–∞–¥')
    .option('-l, --limit <number>', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –ø–æ–∫–∞–∑—É', '10')
    .action((options) => {
        if (analyzer.data.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
            return;
        }

        const limit = parseInt(options.limit);
        const positions = analyzer.getTopPositions(limit);
        
        console.log(`\nüèÜ –¢–û–ü-${limit} –ü–û–°–ê–î`);
        console.log('='.repeat(30));
        positions.forEach((item, index) => {
            console.log(`${index + 1}. ${item.position}: ${item.count}`);
        });
    });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–ø –±–∞–Ω–∫—ñ–≤
program
    .command('banks')
    .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –±–∞–Ω–∫—ñ–≤')
    .option('-l, --limit <number>', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–Ω–∫—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É', '10')
    .action((options) => {
        if (analyzer.data.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
            return;
        }

        const limit = parseInt(options.limit);
        const banks = analyzer.getTopBanks(limit);
        
        console.log(`\nüè¶ –¢–û–ü-${limit} –ë–ê–ù–ö–Ü–í`);
        console.log('='.repeat(30));
        banks.forEach((item, index) => {
            console.log(`${index + 1}. ${item.bank}: ${item.count} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤`);
        });
    });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º
program
    .command('search <lastName>')
    .description('–ü–æ—à—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º')
    .action((lastName) => {
        if (analyzer.data.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
            return;
        }

        const results = analyzer.findManagerByLastName(lastName);
        
        console.log(`\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–®–£–ö–£: "${lastName}"`);
        console.log('='.repeat(40));
        
        if (results.length === 0) {
            console.log('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        } else {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n`);
            results.slice(0, 20).forEach((manager, index) => {
                console.log(`${index + 1}. ${manager.LAST_NAME} ${manager.FIRST_NAME} ${manager.MIDDLE_NAME || ''}`);
                console.log(`   –ü–æ—Å–∞–¥–∞: ${manager.NAME_DOLGN}`);
                console.log(`   –ë–∞–Ω–∫: ${manager.SHORTNAME}`);
                console.log(`   –°—Ç–∞—Ç—É—Å: ${manager.NAME_STATE}`);
                console.log('   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
            });
            
            if (results.length > 20) {
                console.log(`... —ñ —â–µ ${results.length - 20} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
            }
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä–æ–∫–∞–º–∏
program
    .command('years')
    .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–æ–∫–∞–º–∏')
    .action(() => {
        if (analyzer.data.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
            return;
        }

        const yearlyStats = analyzer.getYearlyStats();
        
        console.log('\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –†–û–ö–ê–ú–ò');
        console.log('='.repeat(30));
        
        if (yearlyStats.length === 0) {
            console.log('‚ùå –î–∞–Ω—ñ –ø—Ä–æ –¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
        } else {
            yearlyStats.forEach(item => {
                console.log(`üìÖ ${item.year} —Ä—ñ–∫: ${item.count} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å`);
            });
        }
    });

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
program.parse();

export default BankManagersAnalyzer;