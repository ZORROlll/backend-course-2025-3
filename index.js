import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Command } from 'commander';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class BankManagersAnalyzer {
    constructor(inputFile) {
        this.data = [];
        this.inputFile = inputFile;
        this.loadData();
    }

   loadData() {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if (!fs.existsSync(this.inputFile)) {
            throw new Error('Cannot find input file');
        }
        
        const rawData = fs.readFileSync(this.inputFile, 'utf8');
        this.data = JSON.parse(rawData);
        // –í–ò–î–ê–õ–ò–í console.log - –ù–Ü–ß–û–ì–û –ù–ï –í–ò–í–û–î–ò–¢–ò!
    } catch (error) {
        if (error.message === 'Cannot find input file') {
            throw error; // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
        }
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
    }
}
    getGeneralStats() {
        const totalManagers = this.data.length;
        const activeBanks = this.data.filter(item => item.NAME_STATE === '–ù–æ—Ä–º–∞–ª—å–Ω–∏–π').length;
        const liquidatedBanks = this.data.filter(item => item.NAME_STATE === '–†–µ–∂–∏–º –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó').length;
        const excludedBanks = this.data.filter(item => item.NAME_STATE && item.NAME_STATE.includes('–í–∏–∫–ª—é—á–µ–Ω–æ')).length;

        return {
            totalManagers,
            activeBanks,
            liquidatedBanks,
            excludedBanks
        };
    }

    getTopPositions(limit = 10) {
        const positions = {};
        
        this.data.forEach(manager => {
            const position = manager.NAME_DOLGN || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            positions[position] = (positions[position] || 0) + 1;
        });

        return Object.entries(positions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([position, count]) => ({ position, count }));
    }

    getTopBanks(limit = 10) {
        const banks = {};
        
        this.data.forEach(manager => {
            const bank = manager.SHORTNAME || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            banks[bank] = (banks[bank] || 0) + 1;
        });

        return Object.entries(banks)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([bank, count]) => ({ bank, count }));
    }

    findManagerByLastName(lastName) {
        if (!lastName || typeof lastName !== 'string') {
            console.log('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É');
            return [];
        }
        
        return this.data.filter(manager => 
            manager.LAST_NAME && 
            manager.LAST_NAME.toLowerCase().includes(lastName.toLowerCase())
        );
    }

    getYearlyStats() {
        const yearly = {};
        
        this.data.forEach(manager => {
            if (manager.DATE_BANK) {
                try {
                    const date = new Date(manager.DATE_BANK);
                    if (!isNaN(date.getTime())) {
                        const year = date.getFullYear();
                        yearly[year] = (yearly[year] || 0) + 1;
                    }
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏
                }
            }
        });

        return Object.entries(yearly)
            .sort(([yearA], [yearB]) => yearA - yearB)
            .map(([year, count]) => ({ year: parseInt(year), count }));
    }

    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
    getAllStats() {
        const stats = this.getGeneralStats();
        const topPositions = this.getTopPositions(10);
        const topBanks = this.getTopBanks(10);
        const yearlyStats = this.getYearlyStats();

        return {
            generalStats: stats,
            topPositions,
            topBanks,
            yearlyStats
        };
    }

    // –ù–û–í–ò–ô –ú–ï–¢–û–î: —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–∏–≤–æ–¥—É
    formatStats() {
        const allStats = this.getAllStats();
        let result = '';

        result += 'üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ù–ö–Ü–í–°–¨–ö–ò–• –ú–ï–ù–ï–î–ñ–ï–†–Ü–í\n';
        result += '='.repeat(50) + '\n\n';

        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result += 'üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n';
        result += `   ‚Ä¢ –í—Å—å–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ${allStats.generalStats.totalManagers}\n`;
        result += `   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º: ${allStats.generalStats.activeBanks}\n`;
        result += `   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ —É —Ä–µ–∂–∏–º—ñ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó: ${allStats.generalStats.liquidatedBanks}\n`;
        result += `   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ –≤–∏–∫–ª—é—á–µ–Ω–æ –∑ —Ä–µ—î—Å—Ç—Ä—É: ${allStats.generalStats.excludedBanks}\n\n`;

        // –¢–æ–ø –ø–æ—Å–∞–¥
        result += 'üèÜ –¢–æ–ø-10 –ø–æ—Å–∞–¥:\n';
        allStats.topPositions.forEach((item, index) => {
            result += `   ${index + 1}. ${item.position}: ${item.count}\n`;
        });
        result += '\n';

        // –¢–æ–ø –±–∞–Ω–∫—ñ–≤
        result += 'üè¶ –¢–æ–ø-10 –±–∞–Ω–∫—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n';
        allStats.topBanks.forEach((item, index) => {
            result += `   ${index + 1}. ${item.bank}: ${item.count} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤\n`;
        });
        result += '\n';

        // –†–æ–∫–∏
        result += 'üìÖ –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–æ–∫–∞–º–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:\n';
        if (allStats.yearlyStats.length > 0) {
            allStats.yearlyStats.forEach(item => {
                result += `   ‚Ä¢ ${item.year} —Ä—ñ–∫: ${item.count} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å\n`;
            });
        } else {
            result += '   ‚Ä¢ –î–∞–Ω—ñ –ø—Ä–æ –¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ\n';
        }

        return result;
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ Commander
const program = new Command();

program
    .name('bank-analyzer')
    .description('CLI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤')
    .version('1.0.0')
    // –î–û–î–ê–Ñ–ú–û –°–ü–Ü–õ–¨–ù–Ü –ü–ê–†–ê–ú–ï–¢–†–ò
    .option('-i, --input <file>', '—à–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É (–æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π)') // –í–ò–î–ê–õ–ò–í requiredOption
    .option('-o, --output <file>', '—à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')
    .option('-d, --display', '–≤–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å');

// –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
program.parse();

// –û–¢–†–ò–ú–£–Ñ–ú–û –ü–ê–†–ê–ú–ï–¢–†–ò
const options = program.opts();

// –ü–ï–†–ï–í–Ü–†–ö–ê –û–ë–û–í'–Ø–ó–ö–û–í–û–ì–û –ü–ê–†–ê–ú–ï–¢–†–ê 
if (!options.input) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: Please, specify input file');
    process.exit(1);
}

// –°–ü–†–û–ë–£–Ñ–ú–û –ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –î–ê–ù–Ü
try {
    const analyzer = new BankManagersAnalyzer(options.input);
    
    // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å - –≤–∏—Ö–æ–¥–∏–º–æ
    if (analyzer.data.length === 0) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        process.exit(1);
    }

    // –û–¢–†–ò–ú–£–Ñ–ú–û –†–ï–ó–£–õ–¨–¢–ê–¢
    const result = analyzer.formatStats();

    // –õ–û–ì–Ü–ö–ê –í–ò–í–û–î–£ –ó–ê –í–ò–ú–û–ì–ê–ú–ò –õ–ê–ë–ò
    const shouldDisplay = options.display; // —á–∏ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    const outputFile = options.output;     // —á–∏ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤ —Ñ–∞–π–ª

    // –í–ê–†–Ü–ê–ù–¢ 1: –ù–µ –∑–∞–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if (!shouldDisplay && !outputFile) {
        // –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ - –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        process.exit(0);
    }

    // –í–ê–†–Ü–ê–ù–¢ 2: –ó–∞–¥–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ -d (display) - –≤–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    if (shouldDisplay && !outputFile) {
        console.log(result);
    }

    // –í–ê–†–Ü–ê–ù–¢ 3: –ó–∞–¥–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ -o (output) - –∑–∞–ø–∏—Å—É—î–º–æ –≤ —Ñ–∞–π–ª
    if (!shouldDisplay && outputFile) {
        try {
            fs.writeFileSync(outputFile, result, 'utf8');
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª: ${outputFile}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª:', error.message);
        }
    }

    // –í–ê–†–Ü–ê–ù–¢ 4: –ó–∞–¥–∞–Ω–æ —ñ -d —ñ -o - –≤–∏–≤–æ–¥–∏–º–æ —ñ –≤ –∫–æ–Ω—Å–æ–ª—å —ñ –≤ —Ñ–∞–π–ª
    if (shouldDisplay && outputFile) {
        console.log(result); // –í–∏–≤—ñ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        try {
            fs.writeFileSync(outputFile, result, 'utf8'); // –ó–∞–ø–∏—Å –≤ —Ñ–∞–π–ª
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–∂ –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª: ${outputFile}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª:', error.message);
        }
    }

} catch (error) {
    if (error.message === 'Cannot find input file') {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: Cannot find input file');
        process.exit(1);
    } else {
        console.error('‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
        process.exit(1);
    }
}

export default BankManagersAnalyzer;