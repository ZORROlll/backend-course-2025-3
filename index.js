import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class BankManagersAnalyzer {
    constructor() {
        this.data = [];
        this.loadData();
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON —Ñ–∞–π–ª—É
    loadData() {
        try {
            const filePath = path.join(__dirname, 'bank_managers.json');
            
            if (!fs.existsSync(filePath)) {
                console.log('‚ùå –§–∞–π–ª bank_managers.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
                console.log('‚ùå –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø—Ü—ñ:', __dirname);
                return;
            }
            
            const rawData = fs.readFileSync(filePath, 'utf8');
            this.data = JSON.parse(rawData);
            console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
            console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${this.data.length}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
        }
    }

    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getGeneralStats() {
        const totalManagers = this.data.length;
        const activeBanks = this.data.filter(item => item.NAME_STATE === '–ù–æ—Ä–º–∞–ª—å–Ω–∏–π').length;
        const liquidatedBanks = this.data.filter(item => item.NAME_STATE === '–†–µ–∂–∏–º –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó').length;
        const excludedBanks = this.data.filter(item => item.NAME_STATE && item.NAME_STATE.includes('–í–∏–∫–ª—é—á–µ–Ω–æ')).length;

        return {
            totalManagers,
            activeBanks,
            liquidatedBanks,
            excludedBanks
        };
    }

    // –¢–æ–ø –ø–æ—Å–∞–¥–∏
    getTopPositions(limit = 10) {
        const positions = {};
        
        this.data.forEach(manager => {
            const position = manager.NAME_DOLGN || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            positions[position] = (positions[position] || 0) + 1;
        });

        return Object.entries(positions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([position, count]) => ({ position, count }));
    }

    // –¢–æ–ø –±–∞–Ω–∫–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
    getTopBanks(limit = 10) {
        const banks = {};
        
        this.data.forEach(manager => {
            const bank = manager.SHORTNAME || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            banks[bank] = (banks[bank] || 0) + 1;
        });

        return Object.entries(banks)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([bank, count]) => ({ bank, count }));
    }

    // –ü–æ—à—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º
    findManagerByLastName(lastName) {
        if (!lastName || typeof lastName !== 'string') {
            console.log('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É');
            return [];
        }
        
        return this.data.filter(manager => 
            manager.LAST_NAME && 
            manager.LAST_NAME.toLowerCase().includes(lastName.toLowerCase())
        );
    }

    // –ê–Ω–∞–ª—ñ–∑ –∑–∞ —Ä–æ–∫–∞–º–∏
    getYearlyStats() {
        const yearly = {};
        
        this.data.forEach(manager => {
            if (manager.DATE_BANK) {
                try {
                    const date = new Date(manager.DATE_BANK);
                    if (!isNaN(date.getTime())) {
                        const year = date.getFullYear();
                        yearly[year] = (yearly[year] || 0) + 1;
                    }
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏
                }
            }
        });

        return Object.entries(yearly)
            .sort(([yearA], [yearB]) => yearA - yearB)
            .map(([year, count]) => ({ year: parseInt(year), count }));
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –±–∞–Ω–∫—ñ–≤
    getBankStatusStats() {
        const statuses = {};
        
        this.data.forEach(manager => {
            const status = manager.NAME_STATE || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
            statuses[status] = (statuses[status] || 0) + 1;
        });

        return Object.entries(statuses)
            .sort((a, b) => b[1] - a[1])
            .map(([status, count]) => ({ status, count }));
    }

    // –í–∏–≤—ñ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    printStats() {
        console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ù–ö–Ü–í–°–¨–ö–ò–• –ú–ï–ù–ï–î–ñ–ï–†–Ü–í');
        console.log('='.repeat(50));

        const stats = this.getGeneralStats();
        console.log(`\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚Ä¢ –í—Å—å–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ${stats.totalManagers}`);
        console.log(`   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ –∑ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º: ${stats.activeBanks}`);
        console.log(`   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ —É —Ä–µ–∂–∏–º—ñ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó: ${stats.liquidatedBanks}`);
        console.log(`   ‚Ä¢ –ë–∞–Ω–∫—ñ–≤ –≤–∏–∫–ª—é—á–µ–Ω–æ –∑ —Ä–µ—î—Å—Ç—Ä—É: ${stats.excludedBanks}`);

        console.log(`\nüèÜ –¢–æ–ø-10 –ø–æ—Å–∞–¥:`);
        const topPositions = this.getTopPositions(10);
        topPositions.forEach((item, index) => {
            console.log(`   ${index + 1}. ${item.position}: ${item.count}`);
        });

        console.log(`\nüè¶ –¢–æ–ø-10 –±–∞–Ω–∫—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:`);
        const topBanks = this.getTopBanks(10);
        topBanks.forEach((item, index) => {
            console.log(`   ${index + 1}. ${item.bank}: ${item.count} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤`);
        });

        console.log(`\nüìÖ –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–æ–∫–∞–º–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:`);
        const yearlyStats = this.getYearlyStats();
        if (yearlyStats.length > 0) {
            yearlyStats.forEach(item => {
                console.log(`   ‚Ä¢ ${item.year} —Ä—ñ–∫: ${item.count} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—å`);
            });
        } else {
            console.log(`   ‚Ä¢ –î–∞–Ω—ñ –ø—Ä–æ –¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ`);
        }

        console.log(`\nüèõÔ∏è –°—Ç–∞—Ç—É—Å–∏ –±–∞–Ω–∫—ñ–≤:`);
        const statusStats = this.getBankStatusStats();
        statusStats.forEach((item, index) => {
            console.log(`   ${index + 1}. ${item.status}: ${item.count}`);
        });
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...\n');
    
    const analyzer = new BankManagersAnalyzer();
    
    if (analyzer.data.length === 0) {
        console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        console.log('‚ùå –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª bank_managers.json –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π —Å–∞–º—ñ–π –ø–∞–ø—Ü—ñ');
        return;
    }

    // –í–∏–≤—ñ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analyzer.printStats();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É
    console.log('\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É:');
    const sampleSearch = analyzer.findManagerByLastName('–Ü–≤–∞–Ω');
    if (sampleSearch.length > 0) {
        console.log(`   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ ${sampleSearch.length} –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑ –ø—Ä—ñ–∑–≤–∏—â–µ–º, —â–æ –º—ñ—Å—Ç–∏—Ç—å "–Ü–≤–∞–Ω"`);
        console.log('   ‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥:');
        sampleSearch.slice(0, 3).forEach((manager, idx) => {
            console.log(`     ${idx + 1}. ${manager.LAST_NAME} ${manager.FIRST_NAME} - ${manager.NAME_DOLGN}`);
        });
    }

    console.log('\nüí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:');
    console.log('   ‚Ä¢ analyzer.findManagerByLastName("–ü—Ä—ñ–∑–≤–∏—â–µ")');
    console.log('   ‚Ä¢ analyzer.getTopPositions(5)');
    console.log('   ‚Ä¢ analyzer.getTopBanks(5)');
    console.log('   ‚Ä¢ analyzer.getYearlyStats()');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
main();

export default BankManagersAnalyzer;