import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Command } from 'commander';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class BankManagersAnalyzer {
    constructor(inputFile) {
        this.data = [];
        this.inputFile = inputFile;
        this.loadData();
    }
    
    loadData() {
        try {
            if (!fs.existsSync(this.inputFile)) {
                throw new Error('Cannot find input file');
            }
            
            const rawData = fs.readFileSync(this.inputFile, 'utf8');
            this.data = JSON.parse(rawData);
        } catch (error) {
            if (error.message === 'Cannot find input file') {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
        }
    }

    // –ù–û–í–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –ì–ù–£–ß–ö–û–°–¢–Ü
    getMFO(manager) {
        return manager.MFO || manager.mfo || manager.bank_code || '';
    }

    isNormalBank(manager) {
        const codState = manager.COD_STATE || manager.state_code;
        const nameState = manager.NAME_STATE || manager.state_name;
        
        return codState === 1 || 
               nameState === '–ù–æ—Ä–º–∞–ª—å–Ω–∏–π' || 
               nameState === 'Normal' ||
               nameState === '–ê–∫—Ç–∏–≤–Ω–∏–π';
    }

    getFullName(manager) {
        const lastName = manager.LAST_NAME || manager.last_name || manager.surname || '';
        const firstName = manager.FIRST_NAME || manager.first_name || manager.name || '';
        const middleName = manager.MIDDLE_NAME || manager.middle_name || '';
        
        return `${lastName} ${firstName} ${middleName}`.trim();
    }

    getPosition(manager) {
        return manager.NAME_DOLGN || manager.position || manager.dolgn || '–ü–æ—Å–∞–¥–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
    }

    getBankName(manager) {
        return manager.SHORTNAME || manager.bank_name || manager.bank || '–ë–∞–Ω–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π';
    }

    getGeneralStats() {
        const totalManagers = this.data.length;
        const activeBanks = this.data.filter(item => this.isNormalBank(item)).length;
        const liquidatedBanks = this.data.filter(item => 
            item.NAME_STATE === '–†–µ–∂–∏–º –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó' || 
            item.state_name === '–†–µ–∂–∏–º –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó'
        ).length;
        const excludedBanks = this.data.filter(item => 
            (item.NAME_STATE && item.NAME_STATE.includes('–í–∏–∫–ª—é—á–µ–Ω–æ')) ||
            (item.state_name && item.state_name.includes('–í–∏–∫–ª—é—á–µ–Ω–æ'))
        ).length;

        return {
            totalManagers,
            activeBanks,
            liquidatedBanks,
            excludedBanks
        };
    }

    getTopPositions(limit = 10) {
        const positions = {};
        
        this.data.forEach(manager => {
            const position = this.getPosition(manager);
            positions[position] = (positions[position] || 0) + 1;
        });

        return Object.entries(positions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([position, count]) => ({ position, count }));
    }

    getTopBanks(limit = 10) {
        const banks = {};
        
        this.data.forEach(manager => {
            const bank = this.getBankName(manager);
            banks[bank] = (banks[bank] || 0) + 1;
        });

        return Object.entries(banks)
            .sort((a, b) => b[1] - a[1])
            .slice(0, limit)
            .map(([bank, count]) => ({ bank, count }));
    }

    findManagerByLastName(lastName) {
        if (!lastName || typeof lastName !== 'string') {
            console.log('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É');
            return [];
        }
        
        return this.data.filter(manager => {
            const managerLastName = manager.LAST_NAME || manager.last_name || manager.surname || '';
            return managerLastName.toLowerCase().includes(lastName.toLowerCase());
        });
    }

    getYearlyStats() {
        const yearly = {};
        
        this.data.forEach(manager => {
            const dateField = manager.DATE_BANK || manager.date_bank || manager.date;
            if (dateField) {
                try {
                    const date = new Date(dateField);
                    if (!isNaN(date.getTime())) {
                        const year = date.getFullYear();
                        yearly[year] = (yearly[year] || 0) + 1;
                    }
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞—Ç–∏
                }
            }
        });

        return Object.entries(yearly)
            .sort(([yearA], [yearB]) => yearA - yearB)
            .map(([year, count]) => ({ year: parseInt(year), count }));
    }

    getAllStats() {
        const stats = this.getGeneralStats();
        const topPositions = this.getTopPositions(10);
        const topBanks = this.getTopBanks(10);
        const yearlyStats = this.getYearlyStats();

        return {
            generalStats: stats,
            topPositions,
            topBanks,
            yearlyStats
        };
    }

    // –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î –î–õ–Ø –ß–ê–°–¢–ò–ù–ò 2
    formatStats(options = {}) {
        let result = '';
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º -n
        let filteredData = this.data;
        if (options.normal) {
            filteredData = this.data.filter(manager => this.isNormalBank(manager));
        }

        // –ì—Ä—É–ø—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ –±–∞–Ω–∫–∞—Ö
        const banks = {};
        
        filteredData.forEach(manager => {
            const bankKey = this.getBankName(manager);
            const mfo = this.getMFO(manager);
            
            if (!banks[bankKey]) {
                banks[bankKey] = {
                    mfo: mfo,
                    managers: []
                };
            }
            
            banks[bankKey].managers.push(manager);
        });

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤–∏–≤—ñ–¥
        result += 'üìà –°–ü–ò–°–û–ö –ë–ê–ù–ö–Ü–í –¢–ê –ú–ï–ù–ï–î–ñ–ï–†–Ü–í\n';
        result += '='.repeat(50) + '\n\n';

        Object.entries(banks).forEach(([bankName, bankData]) => {
            // –î–æ–¥–∞—î–º–æ –ú–§–û —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä -m
            if (options.mfo && bankData.mfo) {
                result += `${bankData.mfo} `;
            }
            result += `${bankName}\n`;
            
            // –í–∏–≤–æ–¥–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Ü—å–æ–≥–æ –±–∞–Ω–∫—É
            bankData.managers.forEach(manager => {
                result += `  ‚Ä¢ ${this.getFullName(manager)}`;
                result += ` - ${this.getPosition(manager)}\n`;
            });
            
            result += '\n';
        });

        return result;
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ Commander
const program = new Command();

program
    .name('bank-analyzer')
    .description('CLI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤')
    .version('1.0.0')
    .option('-i, --input <file>', '—à–ª—è—Ö –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É (–æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π)')
    .option('-o, --output <file>', '—à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')
    .option('-d, --display', '–≤–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å')
    .option('-m, --mfo', '–≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–æ–¥ –ú–§–û –±–∞–Ω–∫—É –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–æ—é')
    .option('-n, --normal', '–≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –ª–∏—à–µ –ø—Ä–∞—Ü—é—é—á—ñ –±–∞–Ω–∫–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π"');

// –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
program.parse();

// –û–¢–†–ò–ú–£–Ñ–ú–û –ü–ê–†–ê–ú–ï–¢–†–ò
const options = program.opts();

// –ü–ï–†–ï–í–Ü–†–ö–ê –û–ë–û–í'–Ø–ó–ö–û–í–û–ì–û –ü–ê–†–ê–ú–ï–¢–†–ê 
if (!options.input) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: Please, specify input file');
    process.exit(1);
}

// –°–ü–†–û–ë–£–Ñ–ú–û –ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –î–ê–ù–Ü
try {
    const analyzer = new BankManagersAnalyzer(options.input);
    
    if (analyzer.data.length === 0) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
        process.exit(1);
    }

    // –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–ò–ô –ú–ï–¢–û–î –ó –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò
    const result = analyzer.formatStats({
        mfo: options.mfo,
        normal: options.normal
    });

    // –õ–û–ì–Ü–ö–ê –í–ò–í–û–î–£
    const shouldDisplay = options.display;
    const outputFile = options.output;

    if (!shouldDisplay && !outputFile) {
        process.exit(0);
    }

    if (shouldDisplay && !outputFile) {
        console.log(result);
    }

    if (!shouldDisplay && outputFile) {
        try {
            fs.writeFileSync(outputFile, result, 'utf8');
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª: ${outputFile}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª:', error.message);
        }
    }

    if (shouldDisplay && outputFile) {
        console.log(result);
        try {
            fs.writeFileSync(outputFile, result, 'utf8');
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–∂ –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª: ${outputFile}`);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª:', error.message);
        }
    }

} catch (error) {
    if (error.message === 'Cannot find input file') {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: Cannot find input file');
        process.exit(1);
    } else {
        console.error('‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
        process.exit(1);
    }
}

export default BankManagersAnalyzer;